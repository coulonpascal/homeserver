diff --git a/modules/simpletest/drupal_web_test_case.php b/modules/simpletest/drupal_web_test_case.php
index 51407991dd..2ab5a59280 100644
--- a/modules/simpletest/drupal_web_test_case.php
+++ b/modules/simpletest/drupal_web_test_case.php
@@ -3731,6 +3731,31 @@ protected function verboseEmail($count = 1) {
       $this->verbose(t('Email:') . '<pre>' . print_r($mail, TRUE) . '</pre>');
     }
   }
+
+  /**
+   * Inverse string case.
+   *
+   * @param string $s
+   *   A string to inverse.
+   *
+   * @return string
+   *   The string reversed.
+   */
+  public function strCaseInverse($s) {
+    for ($i = 0; $i < strlen($s); $i++) {
+      if (ctype_alpha($s[$i])) {
+        if (ctype_upper($s[$i])) {
+          $s[$i] = strtolower($s[$i]);
+        }
+        else {
+          $s[$i] = strtoupper($s[$i]);
+        }
+      }
+    }
+
+    return $s;
+  }
+
 }
 
 /**
diff --git a/modules/user/user.module b/modules/user/user.module
index b818d79ab5..dba5a64186 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -299,6 +299,35 @@ function user_load_multiple($uids = array(), $conditions = array(), $reset = FAL
  */
 class UserController extends DrupalDefaultEntityController {
 
+  /**
+   * {@inheritDoc}
+   */
+  public function load($ids = array(), $conditions = array()) {
+    // When the $conditions array is filled with name or mail value fetch the
+    // uids by using LIKE comparaison so that we have a case insensitive
+    // behavior with PostgreSQL (as with MySQL).
+    foreach ($conditions as $column => $value) {
+      switch ($column) {
+        case 'name':
+        case 'mail':
+          $uids = db_select('users')
+            ->fields('users', array('uid'))
+            ->condition($column, db_like($value), 'LIKE')
+            ->execute()->fetchCol();
+          if (!empty($uids)) {
+            $ids = array_merge($ids, $uids);
+          }
+          else {
+            $conditions['uid'] = -1;
+          }
+          unset($conditions[$column]);
+          break;
+      }
+    }
+
+    return parent::load($ids, $conditions);
+  }
+
   function attachLoad(&$queried_users, $revision_id = FALSE) {
     // Build an array of user picture IDs so that these can be fetched later.
     $picture_fids = array();
@@ -2175,8 +2204,14 @@ function user_login_authenticate_validate($form, &$form_state) {
       $form_state['flood_control_triggered'] = 'ip';
       return;
     }
-    $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(':name' => $form_state['values']['name']))->fetchObject();
+    $name = $form_state['values']['name'];
+    $account = db_select('users')
+      ->fields('users', array('uid', 'name'))
+      ->condition('status', 1)
+      ->condition('name', db_like($name), 'LIKE')
+      ->execute()->fetchObject();
     if ($account) {
+      $name = $account->name;
       if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
         // Register flood events based on the uid only, so they apply for any
         // IP address. This is the most secure option.
@@ -2199,7 +2234,7 @@ function user_login_authenticate_validate($form, &$form_state) {
     }
     // We are not limited by flood control, so try to authenticate.
     // Set $form_state['uid'] as a flag for user_login_final_validate().
-    $form_state['uid'] = user_authenticate($form_state['values']['name'], $password);
+    $form_state['uid'] = user_authenticate($name, $password);
   }
 }
 
diff --git a/modules/user/user.test b/modules/user/user.test
index 63143c3ced..a43acc2ab1 100644
--- a/modules/user/user.test
+++ b/modules/user/user.test
@@ -421,6 +421,15 @@ function testPasswordRehashOnLogin() {
   }
 
   /**
+   * Test user login name is case insensitive.
+   */
+  function testLoginNameCaseInsensitive() {
+    $account = $this->drupalCreateUser(array());
+    $account->name = $this->strCaseInverse($account->name);
+    $this->drupalLogin($account);
+  }
+
+  /**
    * Make an unsuccessful login attempt.
    *
    * @param $account
@@ -509,6 +518,21 @@ function testUserPasswordResetLoggedIn() {
   }
 
   /**
+   * Tests password reset functionality.
+   */
+  function testUserPasswordResetNameCaseInsensitive() {
+    // Create a user.
+    $account = $this->drupalCreateUser();
+    $this->drupalLogin($account);
+    $this->drupalLogout();
+    // Attempt to reset password.
+    $edit = array('name' => $this->strCaseInverse($account->name));
+    $this->drupalPost('user/password', $edit, t('E-mail new password'));
+    // Confirm the password reset.
+    $this->assertText(t('Further instructions have been sent to your e-mail address.'), 'Password reset instructions mailed message displayed.');
+  }
+
+  /**
    * Attempts login using an expired password reset link.
    */
   function testUserPasswordResetExpired() {
